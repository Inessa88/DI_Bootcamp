-- Exercise 1: DVD Rental
-- Instructions
-- Get a list of all film languages.
	select name from language;
	
-- Get a list of all films joined with their languages – select the following details : film title, description, and language name. Try your query with different joins:
-- Get all films, even if they don’t have languages.
	select film.title, film.description, language.name
	from film
	left join language
	on film.language_id = language.language_id;
	
-- Get all languages, even if there are no films in those languages.
	select film.title, film.description, language.name
	from film
	right join language
	on film.language_id = language.language_id;

-- Create a new table called new_film with the following columns : id, name. Add some new films to the table.
	CREATE TABLE new_film (
    new_film_id SERIAL PRIMARY KEY,
    name VARCHAR(50)
);
	INSERT INTO new_film (name)
	VALUES
		  ('Green Book'),
		  ('Django Unchained'),
		  ('Inglorious Bastards'),
		  ('Yes Man')
	RETURNING *;
	
-- Create a new table called customer_review, which will contain film reviews that customers will make.
-- Think about the DELETE constraint: if a film is deleted, its review should be automatically deleted.
-- It should have the following columns:
-- review_id – a primary key, non null, auto-increment.
-- film_id – references the new_film table. The film that is being reviewed.
-- language_id – references the language table. What language the review is in.
-- title – the title of the review.
-- score – the rating of the review (1-10).
-- review_text – the text of the review. No limit on the length.
-- last_update – when the review was last updated.
	CREATE TABLE customer_review (
		review_id SERIAL PRIMARY KEY,
		film_id INTEGER REFERENCES new_film (new_film_id) ON DELETE CASCADE ON UPDATE CASCADE,
		language_id	INTEGER REFERENCES language (language_id) ON DELETE CASCADE ON UPDATE CASCADE,
		title VARCHAR(30) NOT NULL,
		score SMALLINT NOT NULL,
		review_text TEXT,
		last_update DATE NOT NULL
	);

-- Add 2 movie reviews. Make sure you link them to valid objects in the other tables.
INSERT INTO customer_review (film_id, language_id, title, score,review_text, last_update)
VALUES
	  ((SELECT new_film_id FROM new_film WHERE new_film_id=1), (SELECT language_id FROM language WHERE language_id=1), 'Exellent movie', 9, 'Here is a very interesting review', '2022-11-15'),
	  ((SELECT new_film_id FROM new_film WHERE new_film_id=2), (SELECT language_id FROM language WHERE language_id=1), 'Just watch it', 8, 'Very detailed review on the movie', '2022-11-15')
RETURNING *;

-- Delete a film that has a review from the new_film table, what happens to the customer_review table?
DELETE FROM new_film
WHERE name='Django Unchained'; -- As we have on delete cascade, in the table customer_review will be left only one record.




-- Exercise 2 : DVD Rental
-- Instructions
-- Use UPDATE to change the language of some films. Make sure that you use valid languages.

update film
set language_id = 2
where title = 'Alabama Devil' or title = 'Forrest Sons' or title = 'Pure Runner'
returning *;

update film
set language_id = 5
where title = 'Grosse Wonderful' or title = 'Fury Murder' or title = 'Strictly Scarface'
returning *;

-- Which foreign keys (references) are defined for the customer table? How does this affect the way in which we INSERT into the customer table?
-- The foreign keys are store_id, address_id. When we insert indormation about store_id, address_id in the table, we use subquiry instead of just writing information we need.

-- We created a new table called customer_review. Drop this table. Is this an easy step, or does it need extra checking?

DROP TABLE customer_review; -- This is an easy step and it doesn't need extra checking, because we didn't create any other table which depends on our primary key in customer_review.

-- Find out how many rentals are still outstanding (ie. have not been returned to the store yet).

SELECT count (rental_id) FROM rental WHERE return_date is null;

-- Find the 30 most expensive movies which are outstanding (ie. have not been returned to the store yet)

SELECT film.title, payment.amount, rental.return_date
FROM rental
INNER JOIN payment ON payment.rental_id = rental.rental_id
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
INNER JOIN film ON film.film_id = inventory.film_id
WHERE return_date is null order by payment.amount desc limit 30;

-- Your friend is at the store, and decides to rent a movie. He knows he wants to see 4 movies, but he can’t remember their names. Can you help him find which movies he wants to rent?

-- The 1st film : The film is about a sumo wrestler, and one of the actors is Penelope Monroe.

SELECT film.title,film.description, actor.first_name, actor.last_name
FROM film_actor
INNER JOIN film ON film.film_id = film_actor.film_id
INNER JOIN actor ON film_actor.actor_id = actor.actor_id
where film.description ilike '%sumo wrestler%' and actor.first_name = 'Penelope' and actor.last_name = 'Monroe';

-- The 2nd film : A short documentary (less than 1 hour long), rated “R”.

SELECT film.title,film.length, film.rating, category.name
FROM film_category
INNER JOIN film ON film_category.film_id = film.film_id
INNER JOIN category ON film_category.category_id = category.category_id
where category.name = 'Documentary' and film.length < 60 and film.rating = 'R';

-- The 3rd film : A film that his friend Matthew Mahan rented. He paid over $4.00 for the rental, and he returned it between the 28th of July and the 1st of August, 2005.

SELECT film.title, payment.amount, customer.first_name, customer.last_name, rental.return_date
FROM rental
INNER JOIN customer ON customer.customer_id = rental.customer_id
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
INNER JOIN payment ON payment.rental_id = rental.rental_id
INNER JOIN film ON film.film_id = inventory.film_id
where customer.first_name = 'Matthew' and customer.last_name = 'Mahan' and payment.amount > 4.00 and rental.return_date between '2005-07-28' and '2005-08-01';

-- The 4th film : His friend Matthew Mahan watched this film, as well. It had the word “boat” in the title or description, and it looked like it was a very expensive DVD to replace.

SELECT film.title,film.description, film.replacement_cost, customer.first_name, customer.last_name
FROM rental
INNER JOIN customer ON customer.customer_id = rental.customer_id
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
INNER JOIN film ON film.film_id = inventory.film_id
where customer.first_name = 'Matthew' and customer.last_name = 'Mahan' and film.replacement_cost > 18 and (film.description ilike '%boat%' or film.title ilike '%boat%');

